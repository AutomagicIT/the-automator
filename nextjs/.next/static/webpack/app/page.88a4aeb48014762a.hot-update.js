"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/app/bottom-panel/task-runner-panel/index.tsx":
/*!**********************************************************!*\
  !*** ./src/app/bottom-panel/task-runner-panel/index.tsx ***!
  \**********************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TaskRunnerPanel: function() { return /* binding */ TaskRunnerPanel; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _context__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../context */ \"(app-pages-browser)/./src/app/context.tsx\");\n/* harmony import */ var _task_context__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../task/context */ \"(app-pages-browser)/./src/app/task/context.tsx\");\n/* harmony import */ var _task_runner_context__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../task-runner/context */ \"(app-pages-browser)/./src/app/task-runner/context.tsx\");\n/* harmony import */ var _lib_api_client__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/lib/api-client */ \"(app-pages-browser)/./src/lib/api-client.ts\");\n/* harmony import */ var _step_editor__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./step-editor */ \"(app-pages-browser)/./src/app/bottom-panel/task-runner-panel/step-editor/index.tsx\");\n/* harmony import */ var _variable_input_modal__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./variable-input-modal */ \"(app-pages-browser)/./src/app/bottom-panel/task-runner-panel/variable-input-modal/index.tsx\");\n/* harmony import */ var _utils_variable_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/variable-utils */ \"(app-pages-browser)/./src/app/bottom-panel/task-runner-panel/utils/variable-utils.ts\");\n/* harmony import */ var _utils_run_all_logger__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils/run-all-logger */ \"(app-pages-browser)/./src/app/bottom-panel/task-runner-panel/utils/run-all-logger.ts\");\n/* harmony import */ var _modals_task_execution_report__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../modals/task-execution-report */ \"(app-pages-browser)/./src/app/modals/task-execution-report.tsx\");\n/* __next_internal_client_entry_do_not_use__ TaskRunnerPanel auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n\n\n\n\n\n\nconst API_BASE_URL = \"http://localhost:8000/api/v1\";\nfunction TaskRunnerPanel(param) {\n    let { onScreenshotAdded, onSubmit, onTaskStart, onTaskComplete, panelMode: externalPanelMode, onModeChange, onThought, onAction, onClearThoughts, onClearActions, onAgentStarting } = param;\n    _s();\n    const { config, messages, addMessage, setMessages, isLoading, setIsLoading, setJsInspectorResult, onJsInspectorUpdate, setNetworkInspectorResult, onNetworkInspectorUpdate } = (0,_context__WEBPACK_IMPORTED_MODULE_2__.useApp)();\n    const { addThought, addAction, addScreenshot, resetStepTracking, clearAllData } = (0,_task_context__WEBPACK_IMPORTED_MODULE_3__.useTask)();\n    const [tasks, setTasks] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const streamingMessageRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(\"\");\n    const [internalPanelMode, setInternalPanelMode] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"maximized\");\n    const [currentExecutionReport, setCurrentExecutionReport] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        actions_taken: [],\n        screenshots: []\n    });\n    const [selectedTaskReport, setSelectedTaskReport] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [stepEditorTask, setStepEditorTask] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [showVariableModal, setShowVariableModal] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [showTaskCreator, setShowTaskCreator] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [isBatchRun, setIsBatchRun] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    // Get task runner state from TaskRunnerContext\n    const { taskVariables, setTaskVariables, taskQueue, addToTaskQueue, clearTaskQueue, setTaskQueue, autoRunning, setAutoRunning, isAnyTaskRunning, setIsAnyTaskRunning, currentTask, setCurrentTask, addSessionStepLog } = (0,_task_runner_context__WEBPACK_IMPORTED_MODULE_4__.useTaskRunner)();\n    const [currentTaskForVariables, setCurrentTaskForVariables] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [currentTaskNumber, setCurrentTaskNumber] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const [isAgentStarting, setIsAgentStarting] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [isProcessingNextTask, setIsProcessingNextTask] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [initialQueueSize, setInitialQueueSize] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0); // Track initial queue size to determine execution mode\n    const [lastJsCode, setLastJsCode] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"\"); // Store the last JavaScript code executed\n    // Use external mode if provided, otherwise use internal state\n    const panelMode = externalPanelMode || internalPanelMode;\n    const setPanelMode = onModeChange || setInternalPanelMode;\n    // Simple minimize icon\n    const getMinimizeIcon = ()=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"svg\", {\n            width: \"16\",\n            height: \"16\",\n            viewBox: \"0 0 16 16\",\n            fill: \"currentColor\",\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"rect\", {\n                x: \"2\",\n                y: \"12\",\n                width: \"12\",\n                height: \"2\"\n            }, void 0, false, {\n                fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                lineNumber: 96,\n                columnNumber: 7\n            }, this)\n        }, void 0, false, {\n            fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n            lineNumber: 95,\n            columnNumber: 5\n        }, this);\n    // Fetch tasks from MongoDB\n    const fetchTasks = async ()=>{\n        try {\n            console.log(\"Fetching tasks from:\", \"\".concat(API_BASE_URL, \"/tasks\"));\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/tasks\"));\n            const data = await response.json();\n            console.log(\"Tasks response:\", data);\n            if (data.tasks) {\n                setTasks(data.tasks);\n                // Check if any tasks are currently running\n                const hasRunningTasks = data.tasks.some((task)=>task.status === \"running\");\n                setIsAnyTaskRunning(hasRunningTasks);\n            }\n        } catch (error) {\n            console.error(\"Failed to fetch tasks:\", error);\n        }\n    };\n    // Clean up browser state only (preserve UI for inspection)  \n    const cleanupBrowserOnly = async ()=>{\n        try {\n            console.log(\"Cleaning up browser state...\");\n            // Call API to cleanup browser and reset VNC\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/cleanup-browser\"), {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                }\n            });\n            if (response.ok) {\n                const result = await response.json();\n                console.log(\"Browser cleanup result:\", result.message);\n            } else {\n                console.warn(\"Browser cleanup failed:\", response.status);\n            }\n            // Wait for cleanup to complete\n            await new Promise((resolve)=>setTimeout(resolve, 3000));\n        } catch (error) {\n            console.error(\"Error during browser cleanup:\", error);\n        }\n    };\n    // Process next task in queue (unified queuing mechanism)\n    const processNextTaskInQueue = async ()=>{\n        console.log(\"\\uD83D\\uDD25 PROCESS_NEXT: Called with queue state\", {\n            queueLength: taskQueue.length,\n            queue: [\n                ...taskQueue\n            ],\n            initialQueueSize,\n            autoRunning,\n            isAnyTaskRunning\n        });\n        if (taskQueue.length > 0) {\n            const isBatchMode = initialQueueSize > 1; // Batch mode if started with >1 task\n            console.log(\"\\uD83D\\uDD25 QUEUE PROCESSING: Processing next task from queue\", {\n                queueLength: taskQueue.length,\n                initialQueueSize,\n                isBatchMode,\n                currentMode: isBatchMode ? \"BATCH\" : \"SINGLE\"\n            });\n            // Pop the next task from the queue (get first item and remove it)\n            const nextTaskId = taskQueue[0];\n            setTaskQueue((prev)=>{\n                const newQueue = prev.slice(1);\n                console.log(\"\\uD83D\\uDD25 QUEUE PROCESSING: Updated queue length\", {\n                    old: prev.length,\n                    new: newQueue.length,\n                    removedTaskId: nextTaskId\n                });\n                return newQueue;\n            });\n            // Find the actual task from the tasks database using _id\n            const nextTask = tasks.find((task)=>task.id === nextTaskId);\n            if (nextTask) {\n                console.log(\"\\uD83D\\uDD25 QUEUE PROCESSING: Found next task, executing\", nextTask.id);\n                // Execute the next task\n                setTimeout(()=>{\n                    executeTaskWithVariables(nextTask);\n                }, 100); // Small delay to ensure state updates\n            } else {\n                console.error(\"\\uD83D\\uDD25 QUEUE PROCESSING: Task not found in database\", nextTaskId);\n                // Continue with next task if this one is missing\n                if (taskQueue.length > 0) {\n                    setTimeout(()=>{\n                        processNextTaskInQueue();\n                    }, 100);\n                }\n            }\n        } else {\n            console.log(\"\\uD83D\\uDD25 QUEUE PROCESSING: All tasks completed, stopping execution\");\n            setIsBatchRun(false);\n            setAutoRunning(false);\n            setIsAnyTaskRunning(false);\n            setInitialQueueSize(0); // Reset for next execution\n            setPanelMode(\"maximized\");\n        }\n    };\n    // Legacy cleanup function (for compatibility)\n    const cleanupBetweenTasks = async ()=>{\n        await cleanupBrowserOnly();\n        await processNextTaskInQueue();\n    };\n    // Execute a task with optional variables\n    const executeTaskWithVariables = async (task, variables)=>{\n        console.log(\"\\uD83D\\uDD25 TASK EXECUTION START:\", {\n            taskId: task.id,\n            isBatchRun,\n            autoRunning,\n            taskQueue: taskQueue.length,\n            isAnyTaskRunning\n        });\n        _utils_run_all_logger__WEBPACK_IMPORTED_MODULE_9__.runAllLogger.info(\"executeTaskWithVariables-start\", \"Starting execution of task \".concat(task.id));\n        // Log comprehensive state at task start\n        _utils_run_all_logger__WEBPACK_IMPORTED_MODULE_9__.runAllLogger.logQueueState(\"executeTaskWithVariables-start\", {\n            taskQueue,\n            autoRunning,\n            isLoading,\n            currentTask,\n            isAnyTaskRunning,\n            isBatchRun\n        });\n        _utils_run_all_logger__WEBPACK_IMPORTED_MODULE_9__.runAllLogger.debug(\"executeTaskWithVariables-start\", \"Task variables and state\", {\n            taskRunnerContextVariables: taskVariables,\n            passedVariables: variables,\n            taskId: task.id,\n            taskInstructions: task.instructions\n        });\n        // FIX: Add null safety and better error handling\n        if (!task || !task.id) {\n            _utils_run_all_logger__WEBPACK_IMPORTED_MODULE_9__.runAllLogger.error(\"executeTaskWithVariables-start\", \"Invalid task provided\", {\n                task\n            });\n            return;\n        }\n        if (isLoading || isAnyTaskRunning) {\n            _utils_run_all_logger__WEBPACK_IMPORTED_MODULE_9__.runAllLogger.warn(\"executeTaskWithVariables-start\", \"Task execution blocked by current state\", {\n                isLoading,\n                isAnyTaskRunning,\n                taskId: task.id\n            });\n            return;\n        }\n        _utils_run_all_logger__WEBPACK_IMPORTED_MODULE_9__.runAllLogger.logTaskExecution(\"executeTaskWithVariables-start\", \"proceeding with execution\", task.id);\n        setCurrentTask(task);\n        setIsAnyTaskRunning(true);\n        let completedTaskForReport = null;\n        let hasStreamErrors = false;\n        let hasToolErrors = false;\n        // Clear UI state from previous task (thoughts, actions, step tracking, inspector data)\n        resetStepTracking();\n        clearAllData();\n        // Clear inspector panel data from previous task\n        setJsInspectorResult(null);\n        setNetworkInspectorResult(null);\n        // Reset execution report for new task\n        setCurrentExecutionReport({\n            actions_taken: [],\n            screenshots: [],\n            tool_outputs: [],\n            final_result: null\n        });\n        // Clear messages to avoid tool role messages from previous tasks\n        setMessages([]);\n        // Clear thoughts and actions from previous tasks\n        if (onClearThoughts) {\n            onClearThoughts();\n        }\n        if (onClearActions) {\n            onClearActions();\n        }\n        // Mark task as running\n        try {\n            await fetch(\"\".concat(API_BASE_URL, \"/tasks/\").concat(task.id, \"/start\"), {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                }\n            });\n            // Update local task status\n            setTasks((prevTasks)=>prevTasks.map((t)=>t.id === task.id ? {\n                        ...t,\n                        status: \"running\"\n                    } : t));\n        } catch (error) {\n            console.error(\"Failed to mark task as running:\", error);\n        }\n        // Interpolate variables in task instructions if provided\n        let processedInstructions = task.instructions;\n        let processedToolUse = task.tool_use;\n        console.log(\"\\uD83D\\uDD25 BEFORE INTERPOLATION - instructions:\", task.instructions);\n        console.log(\"\\uD83D\\uDD25 BEFORE INTERPOLATION - variables:\", variables);\n        if (variables && Object.keys(variables).length > 0) {\n            processedInstructions = (0,_utils_variable_utils__WEBPACK_IMPORTED_MODULE_8__.interpolateVariables)(task.instructions, variables);\n            console.log(\"\\uD83D\\uDD25 AFTER INTERPOLATION - instructions:\", processedInstructions);\n            // Also interpolate variables in tool_use arguments\n            if (task.tool_use && task.tool_use.arguments) {\n                processedToolUse = {\n                    ...task.tool_use,\n                    arguments: Object.fromEntries(Object.entries(task.tool_use.arguments).map((param)=>{\n                        let [key, value] = param;\n                        return [\n                            key,\n                            typeof value === \"string\" ? (0,_utils_variable_utils__WEBPACK_IMPORTED_MODULE_8__.interpolateVariablesInString)(value, variables) : value\n                        ];\n                    }))\n                };\n                console.log(\"\\uD83D\\uDD25 AFTER INTERPOLATION - tool_use:\", processedToolUse);\n            }\n        } else {\n            console.log(\"\\uD83D\\uDD25 NO VARIABLES TO INTERPOLATE\");\n        }\n        // Create instructions for AI agent - include FULL task data\n        console.log(\"\\uD83D\\uDD25 STEP 1: About to join instructions\");\n        console.log(\"\\uD83D\\uDD25 processedInstructions:\", processedInstructions);\n        // FIX: Add proper spacing between steps with double line breaks\n        let instructions = processedInstructions ? processedInstructions.join(\"\\n\\n\") : \"No instructions provided\";\n        console.log(\"\\uD83D\\uDD25 STEP 1 COMPLETE: instructions joined\");\n        if (processedToolUse) {\n            console.log(\"\\uD83D\\uDD25 STEP 2: About to process tool use\");\n            console.log(\"\\uD83D\\uDD25 processedToolUse:\", processedToolUse);\n            console.log(\"\\uD83D\\uDD25 processedToolUse.tool:\", processedToolUse.tool);\n            console.log(\"\\uD83D\\uDD25 processedToolUse.arguments:\", processedToolUse.arguments);\n            // Add the exact tool use data that the AI must execute\n            instructions += \"\\n\\nUse the \".concat(processedToolUse.tool, \" tool\\n with \").concat(JSON.stringify(processedToolUse.arguments));\n            console.log(\"\\uD83D\\uDD25 STEP 2 COMPLETE: tool use processed\");\n        }\n        // Create enhanced task object with complete instructions\n        console.log(\"\\uD83D\\uDD25 STEP 3: About to create enhanced task\");\n        console.log(\"\\uD83D\\uDD25 task:\", task);\n        console.log(\"\\uD83D\\uDD25 instructions:\", instructions);\n        const enhancedTask = {\n            ...task,\n            instructions: instructions\n        };\n        console.log(\"\\uD83D\\uDD25 STEP 3 COMPLETE: enhanced task created\");\n        // Only minimize panel when not auto-running\n        console.log(\"\\uD83D\\uDD25 STEP 4: About to check autoRunning\");\n        console.log(\"\\uD83D\\uDD25 autoRunning:\", autoRunning);\n        if (!autoRunning) {\n            console.log(\"\\uD83D\\uDD25 STEP 4a: About to setPanelMode\");\n            setPanelMode(\"minimized\");\n            console.log(\"\\uD83D\\uDD25 STEP 4a COMPLETE: setPanelMode called\");\n        }\n        if (onTaskStart) {\n            console.log(\"\\uD83D\\uDD25 STEP 4b: About to call onTaskStart\");\n            // Increment task number for session step logging\n            setCurrentTaskNumber((prev)=>prev + 1);\n            onTaskStart(enhancedTask);\n            console.log(\"\\uD83D\\uDD25 STEP 4b COMPLETE: onTaskStart called\");\n        }\n        // Call onSubmit to trigger panel minimization and task state update (only when not auto-running)\n        if (onSubmit && !autoRunning) {\n            console.log(\"\\uD83D\\uDD25 STEP 4c: About to call onSubmit\");\n            onSubmit();\n            console.log(\"\\uD83D\\uDD25 STEP 4c COMPLETE: onSubmit called\");\n        }\n        try {\n            // Add task context to system prompt\n            console.log(\"\\uD83D\\uDD25 STEP 5: About to create task system prompt\");\n            console.log(\"\\uD83D\\uDD25 config.custom_system_prompt:\", config.custom_system_prompt);\n            console.log(\"\\uD83D\\uDD25 task.id:\", task.id);\n            let taskSystemPrompt = \"\".concat(config.custom_system_prompt, \"\\n\\n<TASK_CONTEXT>\\nCurrent Task ID: \").concat(task.id, '\\n\\nIMPORTANT: When you complete this task, you MUST call the mongodb_reporter tool with:\\n- action: \"report_result\"\\n- task_id: \"').concat(task.id, '\"\\n- data: {success: true, result: \"your result data here\"}\\n');\n            console.log(\"\\uD83D\\uDD25 STEP 5 COMPLETE: task system prompt created\");\n            if (processedToolUse) {\n                taskSystemPrompt += \"\\nCRITICAL CONSTRAINT: You are REQUIRED to use the \".concat(processedToolUse.tool, \" tool with EXACTLY these arguments: \").concat(JSON.stringify(processedToolUse.arguments), \"\\n\");\n                taskSystemPrompt += \"DO NOT:\\n- Generate your own JavaScript code\\n- Modify the provided arguments\\n- Create new tool calls\\n- Use any other tools unless explicitly required\\n\";\n                taskSystemPrompt += \"YOU MUST: Use ONLY the \".concat(processedToolUse.tool, \" tool with the exact arguments provided above. Then report completion with mongodb_reporter.\\n\");\n            }\n            taskSystemPrompt += \"</TASK_CONTEXT>\";\n            // Use the shared streaming logic with custom system prompt\n            console.log(\"\\uD83D\\uDD25 CREATING USER MESSAGE with instructions:\", instructions);\n            const userMessage = {\n                role: \"user\",\n                content: instructions\n            };\n            console.log(\"\\uD83D\\uDD25 USER MESSAGE CREATED:\", userMessage);\n            // Create the message array for the API (current messages + new message)\n            console.log(\"\\uD83D\\uDD25 CURRENT MESSAGES:\", messages);\n            const messagesForApi = [\n                ...messages,\n                userMessage\n            ];\n            console.log(\"\\uD83D\\uDD25 MESSAGES FOR API CREATED:\", messagesForApi);\n            // Add message to UI state\n            console.log(\"\\uD83D\\uDD25 ABOUT TO ADD MESSAGE TO UI\");\n            console.log(\"\\uD83D\\uDD25 CHECKING addMessage FUNCTION:\", addMessage);\n            console.log(\"\\uD83D\\uDD25 TYPEOF addMessage:\", typeof addMessage);\n            addMessage(userMessage);\n            console.log(\"\\uD83D\\uDD25 MESSAGE ADDED TO UI SUCCESSFULLY\");\n            console.log(\"\\uD83D\\uDD25 STARTING API CALL with instructions:\", instructions);\n            console.log(\"\\uD83D\\uDD25 STARTING API CALL with system prompt:\", taskSystemPrompt);\n            console.log(\"\\uD83D\\uDD25 CHECKING apiClient:\", _lib_api_client__WEBPACK_IMPORTED_MODULE_5__.apiClient);\n            console.log(\"\\uD83D\\uDD25 CHECKING apiClient.sendChatStream:\", _lib_api_client__WEBPACK_IMPORTED_MODULE_5__.apiClient.sendChatStream);\n            console.log(\"\\uD83D\\uDD25 TYPEOF apiClient.sendChatStream:\", typeof _lib_api_client__WEBPACK_IMPORTED_MODULE_5__.apiClient.sendChatStream);\n            try {\n                console.log(\"\\uD83D\\uDD25 CALLING apiClient.sendChatStream...\");\n                await _lib_api_client__WEBPACK_IMPORTED_MODULE_5__.apiClient.sendChatStream({\n                    messages: messagesForApi,\n                    system_prompt_suffix: taskSystemPrompt,\n                    only_n_most_recent_images: config.only_n_most_recent_images,\n                    tool_version: config.tool_version,\n                    max_tokens: config.output_tokens,\n                    thinking_budget: config.thinking ? config.thinking_budget : undefined,\n                    token_efficient_tools_beta: config.token_efficient_tools_beta\n                }, (event)=>{\n                    console.log(\"\\uD83D\\uDD25 Received event:\", event.type);\n                    switch(event.type){\n                        case \"text\":\n                            streamingMessageRef.current += event.text;\n                            // FIX: Smarter thought tracking to avoid counting JSON fragments as separate steps\n                            if (event.text.trim()) {\n                                const stepNumber = addThought(event.text);\n                                // Add to session step logs\n                                addSessionStepLog(currentTaskNumber, \"thought\", event.text);\n                                // Create thought for assistant text\n                                if (onThought) {\n                                    console.log(\"Creating thought with step:\", stepNumber, \"text:\", event.text);\n                                    onThought({\n                                        id: \"thought-\".concat(Date.now(), \"-\").concat(Math.random()),\n                                        content: event.text,\n                                        timestamp: new Date().toLocaleTimeString(),\n                                        step: stepNumber\n                                    });\n                                }\n                            }\n                            break;\n                        case \"message\":\n                            // Handle assistant messages from the API\n                            if (event.role === \"assistant\" && event.content) {\n                                streamingMessageRef.current += event.content;\n                                // Create thought for assistant text\n                                if (onThought && event.content.trim()) {\n                                    const stepNumber = addThought(event.content);\n                                    // Add to session step logs\n                                    addSessionStepLog(currentTaskNumber, \"thought\", event.content);\n                                    console.log(\"Creating thought from message:\", event.content);\n                                    onThought({\n                                        id: \"thought-\".concat(Date.now(), \"-\").concat(Math.random()),\n                                        content: event.content,\n                                        timestamp: new Date().toLocaleTimeString()\n                                    });\n                                }\n                            }\n                            break;\n                        case \"tool_use\":\n                            // Handle tool use events (when AI calls a tool)\n                            if (onAction && event.tool_name) {\n                                const toolDisplayName = event.tool_name.charAt(0).toUpperCase() + event.tool_name.slice(1).replace(\"_\", \" \");\n                                let description = \"Using \".concat(toolDisplayName);\n                                let details = description;\n                                // Track action in execution report\n                                const actionRecord = {\n                                    tool: event.tool_name,\n                                    action: description,\n                                    details: details,\n                                    timestamp: new Date().toISOString()\n                                };\n                                // Track action in step-by-step execution\n                                const stepNumber = addAction(event.tool_name, description, details);\n                                if (event.tool_name === \"computer\") {\n                                    // Extract detailed computer action information\n                                    if (event.tool_input && event.tool_input.action) {\n                                        const action = event.tool_input.action;\n                                        const input = event.tool_input;\n                                        if (action === \"screenshot\") {\n                                            description = \"Taking screenshot\";\n                                            details = \"Taking screenshot\";\n                                        } else if (action === \"left_click\") {\n                                            const coords = input.coordinate ? \"[\".concat(input.coordinate[0], \", \").concat(input.coordinate[1], \"]\") : \"[unknown coords]\";\n                                            description = \"Clicking \".concat(coords);\n                                            details = \"Clicking at coordinates \".concat(coords);\n                                        } else if (action === \"type\") {\n                                            const text = input.text ? '\"'.concat(input.text.substring(0, 30)).concat(input.text.length > 30 ? \"...\" : \"\", '\"') : \"[unknown text]\";\n                                            description = \"Typing \".concat(text);\n                                            details = \"Typing text: \".concat(text);\n                                        } else if (action === \"key\") {\n                                            const key = input.text || \"unknown key\";\n                                            description = \"Pressing \".concat(key);\n                                            details = \"Pressing key: \".concat(key);\n                                        } else if (action === \"scroll\") {\n                                            const direction = input.scroll_direction || \"unknown direction\";\n                                            const amount = input.scroll_amount || 1;\n                                            description = \"Scrolling \".concat(direction, \" (\").concat(amount, \")\");\n                                            details = \"Scrolling \".concat(direction, \" \").concat(amount, \" times\");\n                                        } else if (action === \"right_click\") {\n                                            const coords = input.coordinate ? \"[\".concat(input.coordinate[0], \", \").concat(input.coordinate[1], \"]\") : \"[unknown coords]\";\n                                            description = \"Right clicking \".concat(coords);\n                                            details = \"Right clicking at coordinates \".concat(coords);\n                                        } else if (action === \"double_click\") {\n                                            const coords = input.coordinate ? \"[\".concat(input.coordinate[0], \", \").concat(input.coordinate[1], \"]\") : \"[unknown coords]\";\n                                            description = \"Double clicking \".concat(coords);\n                                            details = \"Double clicking at coordinates \".concat(coords);\n                                        } else if (action === \"middle_click\") {\n                                            const coords = input.coordinate ? \"[\".concat(input.coordinate[0], \", \").concat(input.coordinate[1], \"]\") : \"[unknown coords]\";\n                                            description = \"Middle clicking \".concat(coords);\n                                            details = \"Middle clicking at coordinates \".concat(coords);\n                                        } else if (action === \"triple_click\") {\n                                            const coords = input.coordinate ? \"[\".concat(input.coordinate[0], \", \").concat(input.coordinate[1], \"]\") : \"[unknown coords]\";\n                                            description = \"Triple clicking \".concat(coords);\n                                            details = \"Triple clicking at coordinates \".concat(coords);\n                                        } else if (action === \"mouse_move\") {\n                                            const coords = input.coordinate ? \"[\".concat(input.coordinate[0], \", \").concat(input.coordinate[1], \"]\") : \"[unknown coords]\";\n                                            description = \"Moving mouse to \".concat(coords);\n                                            details = \"Moving mouse to coordinates \".concat(coords);\n                                        } else if (action === \"left_click_drag\") {\n                                            const coords = input.coordinate ? \"[\".concat(input.coordinate[0], \", \").concat(input.coordinate[1], \"]\") : \"[unknown coords]\";\n                                            description = \"Dragging to \".concat(coords);\n                                            details = \"Click and drag to coordinates \".concat(coords);\n                                        } else if (action === \"cursor_position\") {\n                                            description = \"Getting cursor position\";\n                                            details = \"Getting current cursor position\";\n                                        } else if (action === \"left_mouse_down\") {\n                                            description = \"Mouse down\";\n                                            details = \"Pressing left mouse button down\";\n                                        } else if (action === \"left_mouse_up\") {\n                                            description = \"Mouse up\";\n                                            details = \"Releasing left mouse button\";\n                                        } else if (action === \"hold_key\") {\n                                            const key = input.text || \"unknown key\";\n                                            const duration = input.duration || 0;\n                                            description = \"Holding \".concat(key, \" (\").concat(duration, \"s)\");\n                                            details = \"Holding key \".concat(key, \" for \").concat(duration, \" seconds\");\n                                        } else if (action === \"wait\") {\n                                            const duration = input.duration || 0;\n                                            description = \"Waiting \".concat(duration, \"s\");\n                                            details = \"Waiting for \".concat(duration, \" seconds\");\n                                        } else {\n                                            description = \"Computer \".concat(action);\n                                            details = \"Computer action: \".concat(action);\n                                        }\n                                    } else {\n                                        description = \"Using computer\";\n                                        details = \"Using computer tool\";\n                                    }\n                                } else if (event.tool_name === \"bash\") {\n                                    var _event_tool_input;\n                                    const command = ((_event_tool_input = event.tool_input) === null || _event_tool_input === void 0 ? void 0 : _event_tool_input.command) ? '\"'.concat(event.tool_input.command.substring(0, 40)).concat(event.tool_input.command.length > 40 ? \"...\" : \"\", '\"') : \"[unknown command]\";\n                                    description = \"Running \".concat(command);\n                                    details = \"Running bash command: \".concat(command);\n                                } else if (event.tool_name === \"js_inspector\" || event.tool_name === \"inspect_js\") {\n                                    var _event_tool_input1;\n                                    // Capture the JavaScript code for later use in inspector panel\n                                    const jsCode = ((_event_tool_input1 = event.tool_input) === null || _event_tool_input1 === void 0 ? void 0 : _event_tool_input1.code) || \"JavaScript code\";\n                                    setLastJsCode(jsCode);\n                                    description = \"Executing JavaScript\";\n                                    details = \"Executing JavaScript: \".concat(jsCode.substring(0, 50)).concat(jsCode.length > 50 ? \"...\" : \"\");\n                                } else if (event.tool_name === \"mongodb_reporter\") {\n                                    description = \"Reporting to database\";\n                                    details = \"Reporting task result to database\";\n                                }\n                                // Update action record with finalized description\n                                actionRecord.action = description;\n                                actionRecord.details = details;\n                                // Add to session step logs\n                                addSessionStepLog(currentTaskNumber, \"action\", description);\n                                // Add to execution report\n                                setCurrentExecutionReport((prev)=>({\n                                        ...prev,\n                                        actions_taken: [\n                                            ...prev.actions_taken || [],\n                                            actionRecord\n                                        ]\n                                    }));\n                                console.log(\"Creating action with step:\", stepNumber, \"tool:\", event.tool_name, \"description:\", description);\n                                onAction({\n                                    id: \"action-\".concat(Date.now(), \"-\").concat(Math.random()),\n                                    content: description,\n                                    action: toolDisplayName,\n                                    details: details,\n                                    status: \"running\",\n                                    timestamp: new Date().toLocaleTimeString(),\n                                    step: stepNumber\n                                });\n                            }\n                            break;\n                        case \"tool_result\":\n                            // Handle tool results (no actions - those are created on tool_use)\n                            if (event.base64_image) {\n                                if (onScreenshotAdded) {\n                                    onScreenshotAdded(event.base64_image);\n                                }\n                                // Track screenshot in execution report\n                                setCurrentExecutionReport((prev)=>({\n                                        ...prev,\n                                        screenshots: [\n                                            ...prev.screenshots || [],\n                                            event.base64_image\n                                        ]\n                                    }));\n                                // Track screenshot in step-by-step execution\n                                const stepNumber = addScreenshot(event.base64_image);\n                                // Add to session step logs\n                                addSessionStepLog(currentTaskNumber, \"screenshot\", \"data:image/png;base64,\".concat(event.base64_image));\n                            }\n                            // Handle js_inspector and inspect_js tool results (both output and error cases)\n                            if ((event.output || event.error) && (event.tool_name === \"js_inspector\" || event.tool_name === \"inspect_js\" || event.output && event.output.includes(\"JavaScript execution\"))) {\n                                try {\n                                    let result;\n                                    // For inspect_js tool, the output is the direct result, and we use the captured code\n                                    if (event.tool_name === \"inspect_js\") {\n                                        result = {\n                                            code: lastJsCode || \"JavaScript code\",\n                                            result: event.output || \"Error occurred\",\n                                            resultType: \"text\",\n                                            error: event.error\n                                        };\n                                    } else {\n                                        // For js_inspector, try to parse JSON first\n                                        try {\n                                            result = JSON.parse(event.output);\n                                        } catch (e) {\n                                            if (event.output.includes(\"Result:\") || event.output.includes(\"JavaScript execution\")) {\n                                                result = {\n                                                    code: \"JavaScript execution\",\n                                                    result: event.output,\n                                                    resultType: \"text\"\n                                                };\n                                            } else {\n                                                result = {\n                                                    code: \"Unknown\",\n                                                    result: event.output,\n                                                    resultType: \"text\"\n                                                };\n                                            }\n                                        }\n                                    }\n                                    const jsResult = {\n                                        code: result.code || \"JavaScript execution\",\n                                        operation: event.tool_name === \"inspect_js\" ? \"inspect_js\" : \"js_inspector\",\n                                        result: result.result || event.output,\n                                        resultType: result.resultType || \"unknown\",\n                                        timestamp: new Date().toISOString(),\n                                        error: result.error\n                                    };\n                                    setJsInspectorResult(jsResult);\n                                    // Track JS validation in execution report\n                                    setCurrentExecutionReport((prev)=>({\n                                            ...prev,\n                                            js_validation: {\n                                                expression: jsResult.code,\n                                                success: !jsResult.error && jsResult.result !== undefined,\n                                                result: jsResult.result,\n                                                error: jsResult.error\n                                            },\n                                            // Also capture the raw tool output\n                                            tool_outputs: [\n                                                ...prev.tool_outputs || [],\n                                                {\n                                                    tool: event.tool_name,\n                                                    output: event.output,\n                                                    timestamp: new Date().toISOString()\n                                                }\n                                            ]\n                                        }));\n                                    if (onJsInspectorUpdate) {\n                                        onJsInspectorUpdate();\n                                    }\n                                } catch (parseError) {\n                                    console.warn(\"Failed to parse js_inspector result:\", parseError);\n                                    setJsInspectorResult({\n                                        code: \"JavaScript execution\",\n                                        result: event.output,\n                                        resultType: \"text\",\n                                        timestamp: new Date().toISOString(),\n                                        error: parseError.message\n                                    });\n                                    if (onJsInspectorUpdate) {\n                                        onJsInspectorUpdate();\n                                    }\n                                }\n                            }\n                            // Handle inspect_network tool results\n                            if (event.output && event.tool_name === \"inspect_network\") {\n                                try {\n                                    let networkResult;\n                                    // Try to parse structured data from the output\n                                    if (event.output.includes(\"<inspector>\")) {\n                                        const startMarker = \"<inspector>\";\n                                        const endMarker = \"</inspector>\";\n                                        const startIndex = event.output.indexOf(startMarker);\n                                        const endIndex = event.output.indexOf(endMarker);\n                                        if (startIndex !== -1 && endIndex !== -1) {\n                                            const structuredDataStr = event.output.slice(startIndex + startMarker.length, endIndex).trim();\n                                            try {\n                                                networkResult = JSON.parse(structuredDataStr);\n                                            } catch (e) {\n                                                // Fall back to basic parsing\n                                                networkResult = {\n                                                    requests: [],\n                                                    operation: \"Network monitoring\",\n                                                    error: \"Failed to parse structured data\"\n                                                };\n                                            }\n                                        }\n                                    } else {\n                                        // Basic parsing for non-structured output\n                                        networkResult = {\n                                            requests: [],\n                                            operation: \"Network monitoring\",\n                                            rawOutput: event.output\n                                        };\n                                    }\n                                    const finalNetworkResult = {\n                                        requests: networkResult.requests || [],\n                                        operation: networkResult.operation || \"Network monitoring\",\n                                        timestamp: new Date().toISOString(),\n                                        error: networkResult.error\n                                    };\n                                    setNetworkInspectorResult(finalNetworkResult);\n                                    // Track network monitoring in execution report\n                                    setCurrentExecutionReport((prev)=>({\n                                            ...prev,\n                                            tool_outputs: [\n                                                ...prev.tool_outputs || [],\n                                                {\n                                                    tool: \"inspect_network\",\n                                                    output: event.output,\n                                                    timestamp: new Date().toISOString()\n                                                }\n                                            ]\n                                        }));\n                                    if (onNetworkInspectorUpdate) {\n                                        onNetworkInspectorUpdate();\n                                    }\n                                } catch (parseError) {\n                                    console.warn(\"Failed to parse inspect_network result:\", parseError);\n                                    setNetworkInspectorResult({\n                                        requests: [],\n                                        operation: \"Network monitoring\",\n                                        timestamp: new Date().toISOString(),\n                                        error: parseError.message\n                                    });\n                                    if (onNetworkInspectorUpdate) {\n                                        onNetworkInspectorUpdate();\n                                    }\n                                }\n                            }\n                            // Capture tool outputs for all tools (except js_inspector/inspect_js and inspect_network which are handled above)\n                            if ((event.output || event.error) && event.tool_name !== \"js_inspector\" && event.tool_name !== \"inspect_js\" && event.tool_name !== \"inspect_network\") {\n                                setCurrentExecutionReport((prev)=>({\n                                        ...prev,\n                                        tool_outputs: [\n                                            ...(prev === null || prev === void 0 ? void 0 : prev.tool_outputs) || [],\n                                            {\n                                                tool: event.tool_name || \"unknown\",\n                                                output: event.output || event.error || \"\",\n                                                timestamp: new Date().toISOString()\n                                            }\n                                        ]\n                                    }));\n                            }\n                            // Only add tool messages to UI for certain tools, not js_inspector instructions\n                            if (event.output || event.error) {\n                            // Don't show js_inspector/inspect_js tool results to user (they're shown in inspector panel)\n                            }\n                            break;\n                        case \"error\":\n                            hasStreamErrors = true;\n                            console.error(\"Stream error:\", event.error);\n                            break;\n                        case \"done\":\n                            // Stream completed successfully\n                            console.log(\"\\uD83D\\uDD25 Stream completed\");\n                            break;\n                    }\n                });\n                console.log(\"\\uD83D\\uDD25 sendChatStream completed successfully\");\n            } catch (error) {\n                console.error(\"\\uD83D\\uDD25 ERROR in sendChatStream call:\", error);\n                throw error;\n            }\n            if (streamingMessageRef.current) {\n                addMessage({\n                    role: \"assistant\",\n                    content: streamingMessageRef.current\n                });\n                // Determine final status based on various failure conditions\n                let finalStatus = \"passed\";\n                // Check for various failure conditions\n                if (hasStreamErrors || hasToolErrors) {\n                    finalStatus = \"failed\";\n                } else if (currentExecutionReport.js_validation) {\n                    finalStatus = currentExecutionReport.js_validation.success ? \"passed\" : \"failed\";\n                } else if (streamingMessageRef.current.toLowerCase().includes(\"task failed\") || streamingMessageRef.current.toLowerCase().includes(\"step failed\") || streamingMessageRef.current.toLowerCase().includes(\"execution failed\") || streamingMessageRef.current.toLowerCase().includes(\"could not complete\") || streamingMessageRef.current.toLowerCase().includes(\"unable to complete\")) {\n                    finalStatus = \"failed\";\n                }\n                // Set final result in execution report\n                const finalExecutionReport = {\n                    ...currentExecutionReport,\n                    final_result: streamingMessageRef.current\n                };\n                // Only mark task as completed if we got an actual response\n                await fetch(\"\".concat(API_BASE_URL, \"/tasks/\").concat(task.id, \"/complete\"), {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify({\n                        result: streamingMessageRef.current,\n                        execution_report: finalExecutionReport,\n                        status: finalStatus\n                    })\n                });\n                // Update local task status and store completed task for report\n                setTasks((prevTasks)=>{\n                    const updatedTasks = prevTasks.map((t)=>{\n                        if (t.id === task.id) {\n                            completedTaskForReport = {\n                                ...t,\n                                status: finalStatus,\n                                completed_at: new Date().toISOString(),\n                                execution_report: finalExecutionReport,\n                                result: streamingMessageRef.current\n                            };\n                            return completedTaskForReport;\n                        }\n                        return t;\n                    });\n                    return updatedTasks;\n                });\n                // FIX: Handle next task continuation HERE in success path\n                console.log(\"\\uD83D\\uDD25 TASK COMPLETION CHECK:\", {\n                    isBatchRun,\n                    autoRunning,\n                    condition: isBatchRun || autoRunning,\n                    taskId: task.id\n                });\n                if (isBatchRun || autoRunning) {\n                    console.log(\"\\uD83D\\uDD25 TASK COMPLETED - PROCESSING NEXT TASK IN QUEUE\");\n                    _utils_run_all_logger__WEBPACK_IMPORTED_MODULE_9__.runAllLogger.info(\"executeTaskWithVariables-success\", \"Task completed, processing next in sequence\");\n                    // Use functional update to get current queue state and remove completed task\n                    setTaskQueue((currentQueue)=>{\n                        const remainingQueue = currentQueue.filter((taskId)=>taskId !== task.id);\n                        console.log(\"\\uD83D\\uDD25 QUEUE UPDATE:\", {\n                            originalLength: currentQueue.length,\n                            remainingLength: remainingQueue.length,\n                            completedTaskId: task.id,\n                            nextTaskId: remainingQueue[0] || \"none\"\n                        });\n                        _utils_run_all_logger__WEBPACK_IMPORTED_MODULE_9__.runAllLogger.info(\"executeTaskWithVariables-success\", \"Updated queue after task completion\", {\n                            originalLength: currentQueue.length,\n                            remainingLength: remainingQueue.length,\n                            completedTaskId: task.id,\n                            nextTaskId: remainingQueue[0] || \"none\"\n                        });\n                        if (remainingQueue.length > 0) {\n                            const nextTaskId = remainingQueue[0];\n                            const nextTask = tasks.find((t)=>t.id === nextTaskId);\n                            console.log(\"\\uD83D\\uDD25 SCHEDULING NEXT TASK:\", nextTaskId);\n                            _utils_run_all_logger__WEBPACK_IMPORTED_MODULE_9__.runAllLogger.logTaskExecution(\"executeTaskWithVariables-success\", \"scheduling next task\", nextTaskId);\n                            // Schedule next task execution after cleanup\n                            if (nextTask) {\n                                setTimeout(async ()=>{\n                                    console.log(\"\\uD83D\\uDD25 STARTING NEXT TASK:\", nextTask.id);\n                                    setIsAgentStarting(true);\n                                    onAgentStarting === null || onAgentStarting === void 0 ? void 0 : onAgentStarting(true);\n                                    setTimeout(async ()=>{\n                                        console.log(\"\\uD83D\\uDD25 EXECUTING NEXT TASK:\", nextTask.id);\n                                        setIsAgentStarting(false);\n                                        onAgentStarting === null || onAgentStarting === void 0 ? void 0 : onAgentStarting(false);\n                                        await executeTaskWithVariables(nextTask, taskVariables);\n                                    }, 1000);\n                                }, 4000); // Wait for cleanup to complete\n                            } else {\n                                console.error(\"\\uD83D\\uDD25 NEXT TASK NOT FOUND IN TASKS ARRAY:\", nextTaskId);\n                            }\n                        } else {\n                            // All tasks completed\n                            console.log(\"\\uD83D\\uDD25 ALL TASKS COMPLETED - STOPPING AUTO-RUN\");\n                            _utils_run_all_logger__WEBPACK_IMPORTED_MODULE_9__.runAllLogger.info(\"executeTaskWithVariables-success\", \"All tasks completed, stopping auto-run\");\n                            setAutoRunning(false);\n                            setIsAnyTaskRunning(false);\n                            setIsBatchRun(false);\n                            setPanelMode(\"maximized\");\n                            // Check if this was batch mode (multiple tasks initially)\n                            const wasBatchMode = initialQueueSize > 1;\n                            _utils_run_all_logger__WEBPACK_IMPORTED_MODULE_9__.runAllLogger.info(\"\\uD83D\\uDD25 BATCH MODE DEBUG\", \"ALL TASKS COMPLETED\", {\n                                initialQueueSize,\n                                wasBatchMode,\n                                completedTaskForReport: !!completedTaskForReport,\n                                willShowModal: !!(completedTaskForReport && !wasBatchMode)\n                            });\n                            // Only show task report in single mode, skip in batch mode\n                            if (completedTaskForReport && !wasBatchMode) {\n                                _utils_run_all_logger__WEBPACK_IMPORTED_MODULE_9__.runAllLogger.error(\"\\uD83D\\uDD25 BATCH MODE DEBUG\", \"SHOWING TASK EXECUTION REPORT - THIS SHOULD NOT HAPPEN IN BATCH MODE!\");\n                                setTimeout(()=>{\n                                    setSelectedTaskReport(completedTaskForReport);\n                                }, 500);\n                            } else {\n                                _utils_run_all_logger__WEBPACK_IMPORTED_MODULE_9__.runAllLogger.info(\"\\uD83D\\uDD25 BATCH MODE DEBUG\", \"CORRECTLY SKIPPING TASK EXECUTION REPORT IN BATCH MODE\");\n                            }\n                        }\n                        return remainingQueue;\n                    });\n                }\n            } else {\n                console.log(\"No response received - not marking task as complete\");\n            }\n        } catch (error) {\n            _utils_run_all_logger__WEBPACK_IMPORTED_MODULE_9__.runAllLogger.error(\"executeTaskWithVariables-error\", \"Error executing task\", {\n                taskId: task.id,\n                error: String(error),\n                autoRunning,\n                isBatchRun\n            });\n            // Set error in execution report\n            const errorExecutionReport = {\n                ...currentExecutionReport,\n                final_result: null,\n                error: String(error)\n            };\n            // Mark task as failed\n            try {\n                await fetch(\"\".concat(API_BASE_URL, \"/tasks/\").concat(task.id, \"/error\"), {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify({\n                        error: String(error),\n                        execution_report: errorExecutionReport\n                    })\n                });\n                _utils_run_all_logger__WEBPACK_IMPORTED_MODULE_9__.runAllLogger.info(\"executeTaskWithVariables-error\", \"Task marked as failed in database\", {\n                    taskId: task.id\n                });\n            } catch (apiError) {\n                _utils_run_all_logger__WEBPACK_IMPORTED_MODULE_9__.runAllLogger.error(\"executeTaskWithVariables-error\", \"Failed to update task status in database\", {\n                    taskId: task.id,\n                    apiError: String(apiError)\n                });\n            }\n            // Update local task status\n            setTasks((prevTasks)=>prevTasks.map((t)=>t.id === task.id ? {\n                        ...t,\n                        status: \"error\",\n                        error: String(error),\n                        execution_report: errorExecutionReport\n                    } : t));\n            // Set completed task for report even if it failed\n            completedTaskForReport = {\n                ...task,\n                status: \"error\",\n                error: String(error),\n                execution_report: errorExecutionReport\n            };\n        } finally{\n            _utils_run_all_logger__WEBPACK_IMPORTED_MODULE_9__.runAllLogger.debug(\"executeTaskWithVariables-finally\", \"Task execution cleanup starting\", {\n                taskId: task.id,\n                completedTaskExists: !!completedTaskForReport,\n                autoRunning,\n                isBatchRun,\n                isProcessingNextTask\n            });\n            setIsLoading(false);\n            streamingMessageRef.current = \"\";\n            setCurrentTask(null);\n            // Notify parent when task completes\n            if (onTaskComplete) {\n                _utils_run_all_logger__WEBPACK_IMPORTED_MODULE_9__.runAllLogger.debug(\"executeTaskWithVariables-finally\", \"Notifying parent of task completion\");\n                onTaskComplete(completedTaskForReport);\n            }\n            // Refresh tasks\n            try {\n                await fetchTasks();\n                _utils_run_all_logger__WEBPACK_IMPORTED_MODULE_9__.runAllLogger.debug(\"executeTaskWithVariables-finally\", \"Tasks refreshed successfully\");\n                // Additional safety check: if no tasks are running and queue is empty, ensure states are cleared\n                setTimeout(()=>{\n                    if (taskQueue.length === 0 && !tasks.some((t)=>t.status === \"running\")) {\n                        setIsAnyTaskRunning(false);\n                        setAutoRunning(false);\n                        setIsBatchRun(false);\n                    }\n                }, 100);\n            } catch (fetchError) {\n                _utils_run_all_logger__WEBPACK_IMPORTED_MODULE_9__.runAllLogger.error(\"executeTaskWithVariables-finally\", \"Failed to refresh tasks\", {\n                    error: String(fetchError)\n                });\n            }\n            // Clean up browser state only (preserve UI for inspection)\n            try {\n                await cleanupBrowserOnly();\n                _utils_run_all_logger__WEBPACK_IMPORTED_MODULE_9__.runAllLogger.debug(\"executeTaskWithVariables-finally\", \"Browser cleanup completed, UI preserved for inspection\");\n            } catch (cleanupError) {\n                _utils_run_all_logger__WEBPACK_IMPORTED_MODULE_9__.runAllLogger.error(\"executeTaskWithVariables-finally\", \"Cleanup between tasks failed\", {\n                    error: String(cleanupError)\n                });\n            }\n            // Check remaining tasks in queue (more reliable than checking database state)\n            const remainingTasksInQueue = taskQueue.length;\n            // Determine if we should continue automatically based on initial queue size\n            const isBatchMode = initialQueueSize > 1;\n            // Use task queue as the authoritative source for remaining work\n            const shouldContinueAutomatically = isBatchMode && remainingTasksInQueue > 0;\n            _utils_run_all_logger__WEBPACK_IMPORTED_MODULE_9__.runAllLogger.info(\"executeTaskWithVariables-completion\", \"Task completion logic\", {\n                initialQueueSize,\n                currentQueueLength: taskQueue.length,\n                remainingTasksInQueue,\n                isBatchMode,\n                shouldContinueAutomatically,\n                completedTaskId: task.id,\n                autoRunning,\n                isBatchRun\n            });\n            if (shouldContinueAutomatically) {\n                _utils_run_all_logger__WEBPACK_IMPORTED_MODULE_9__.runAllLogger.info(\"executeTaskWithVariables-completion\", \"Batch mode: automatically processing next task\");\n                // Log the current state before processing next task\n                _utils_run_all_logger__WEBPACK_IMPORTED_MODULE_9__.runAllLogger.logQueueState(\"executeTaskWithVariables-before-next\", {\n                    taskQueue,\n                    autoRunning,\n                    isLoading,\n                    currentTask,\n                    isAnyTaskRunning,\n                    isBatchRun,\n                    completedTaskForReport\n                });\n                // Batch mode: automatically continue to next task\n                console.log(\"\\uD83D\\uDD25 COMPLETION: About to call processNextTaskInQueue\", {\n                    currentQueueLength: taskQueue.length,\n                    remainingTasksInQueue,\n                    taskQueue: [\n                        ...taskQueue\n                    ]\n                });\n                await processNextTaskInQueue();\n            } else {\n                // Single mode: pause and preserve UI for inspection\n                _utils_run_all_logger__WEBPACK_IMPORTED_MODULE_9__.runAllLogger.info(\"executeTaskWithVariables-completion\", \"Single mode: pausing for inspection, UI preserved\");\n                setIsAnyTaskRunning(false);\n                _utils_run_all_logger__WEBPACK_IMPORTED_MODULE_9__.runAllLogger.info(\"\\uD83D\\uDD25 BATCH MODE DEBUG\", \"SINGLE MODE PATH\", {\n                    initialQueueSize,\n                    isBatchMode,\n                    completedTaskForReport: !!completedTaskForReport,\n                    willShowModal: !!(completedTaskForReport && !isBatchMode)\n                });\n                // Only show task report in single mode, skip in batch mode  \n                if (completedTaskForReport && !isBatchMode) {\n                    _utils_run_all_logger__WEBPACK_IMPORTED_MODULE_9__.runAllLogger.error(\"\\uD83D\\uDD25 BATCH MODE DEBUG\", \"SHOWING TASK EXECUTION REPORT IN SINGLE MODE PATH - THIS SHOULD NOT HAPPEN IN BATCH MODE!\");\n                    setTimeout(()=>{\n                        setSelectedTaskReport(completedTaskForReport);\n                    }, 500); // Small delay to ensure UI has updated\n                } else {\n                    _utils_run_all_logger__WEBPACK_IMPORTED_MODULE_9__.runAllLogger.info(\"\\uD83D\\uDD25 BATCH MODE DEBUG\", \"CORRECTLY SKIPPING TASK EXECUTION REPORT\");\n                }\n            }\n        }\n    };\n    // Execute a single task using the same queue mechanism as Run All\n    const executeTask = async (task)=>{\n        _utils_run_all_logger__WEBPACK_IMPORTED_MODULE_9__.runAllLogger.info(\"executeTask\", \"Single task execution called for task \".concat(task.id));\n        // FIX: Add null safety\n        if (!task || !task.id) {\n            _utils_run_all_logger__WEBPACK_IMPORTED_MODULE_9__.runAllLogger.error(\"executeTask\", \"Invalid task provided\", {\n                task\n            });\n            return;\n        }\n        _utils_run_all_logger__WEBPACK_IMPORTED_MODULE_9__.runAllLogger.logQueueState(\"executeTask\", {\n            taskQueue,\n            autoRunning,\n            isLoading,\n            currentTask,\n            isAnyTaskRunning,\n            isBatchRun\n        });\n        // Clear queue and add this single task to it\n        clearTaskQueue();\n        addToTaskQueue(task.id);\n        // Set initial queue size for single task execution (triggers single mode)\n        setInitialQueueSize(1);\n        // Set batch run to enable queue processing\n        setIsBatchRun(true);\n        const variables = (0,_utils_variable_utils__WEBPACK_IMPORTED_MODULE_8__.extractVariables)(task.instructions);\n        _utils_run_all_logger__WEBPACK_IMPORTED_MODULE_9__.runAllLogger.debug(\"executeTask\", \"Variables extraction result\", {\n            taskId: task.id,\n            variables,\n            hasVariables: variables.length > 0\n        });\n        if (variables.length > 0) {\n            _utils_run_all_logger__WEBPACK_IMPORTED_MODULE_9__.runAllLogger.info(\"executeTask\", \"Showing variable modal for single task\", {\n                taskId: task.id,\n                variables\n            });\n            // Show modal for variable input\n            setCurrentTaskForVariables(task);\n            setShowVariableModal(true);\n        } else {\n            _utils_run_all_logger__WEBPACK_IMPORTED_MODULE_9__.runAllLogger.info(\"executeTask\", \"No variables found, executing task via queue\", {\n                taskId: task.id\n            });\n            // No variables, execute via queue mechanism\n            setAutoRunning(true);\n            try {\n                await executeTaskWithVariables(task);\n                _utils_run_all_logger__WEBPACK_IMPORTED_MODULE_9__.runAllLogger.info(\"executeTask\", \"Single task execution completed successfully\", {\n                    taskId: task.id\n                });\n            } catch (error) {\n                _utils_run_all_logger__WEBPACK_IMPORTED_MODULE_9__.runAllLogger.error(\"executeTask\", \"Single task execution failed\", {\n                    taskId: task.id,\n                    error: String(error)\n                });\n            }\n        }\n    };\n    // Handle variable modal submission for single task\n    const handleSingleTaskVariables = async (variables)=>{\n        if (currentTaskForVariables) {\n            setTaskVariables(variables);\n            await executeTaskWithVariables(currentTaskForVariables, variables);\n            setCurrentTaskForVariables(null);\n        }\n    };\n    // Handle variable modal submission for all tasks\n    const handleAllTasksVariables = async (variables)=>{\n        _utils_run_all_logger__WEBPACK_IMPORTED_MODULE_9__.runAllLogger.info(\"handleAllTasksVariables\", \"Setting variables and starting execution\", {\n            variables\n        });\n        setTaskVariables(variables);\n        setAutoRunning(true);\n        _utils_run_all_logger__WEBPACK_IMPORTED_MODULE_9__.runAllLogger.logQueueState(\"handleAllTasksVariables\", {\n            taskQueue,\n            autoRunning: true,\n            isLoading,\n            currentTask,\n            isAnyTaskRunning,\n            isBatchRun\n        });\n        // Start with the first pending task with variables, the queue will handle the rest\n        const pendingTasks = tasks.filter((task)=>task.status === \"pending\");\n        const firstTask = pendingTasks[0];\n        if (firstTask) {\n            _utils_run_all_logger__WEBPACK_IMPORTED_MODULE_9__.runAllLogger.logTaskExecution(\"handleAllTasksVariables\", \"starting first task with variables\", firstTask.id);\n            await executeTaskWithVariables(firstTask, variables);\n        } else {\n            _utils_run_all_logger__WEBPACK_IMPORTED_MODULE_9__.runAllLogger.error(\"handleAllTasksVariables\", \"No first task found\");\n            setAutoRunning(false);\n        }\n    };\n    // Close variable modal\n    const closeVariableModal = ()=>{\n        setShowVariableModal(false);\n        setCurrentTaskForVariables(null);\n    // Don't set isBatchRun(false) here - keep it true for queue processing\n    };\n    // Start auto-running tasks\n    const startAutoRun = async ()=>{\n        _utils_run_all_logger__WEBPACK_IMPORTED_MODULE_9__.runAllLogger.info(\"startAutoRun\", \"Starting Run All execution\");\n        // Get all pending tasks and populate the task queue\n        const pendingTasks = tasks.filter((task)=>task.status === \"pending\");\n        _utils_run_all_logger__WEBPACK_IMPORTED_MODULE_9__.runAllLogger.logQueueState(\"startAutoRun-initial\", {\n            taskQueue,\n            autoRunning,\n            isLoading,\n            currentTask,\n            isAnyTaskRunning,\n            isBatchRun,\n            pendingTasks\n        });\n        if (pendingTasks.length === 0) {\n            _utils_run_all_logger__WEBPACK_IMPORTED_MODULE_9__.runAllLogger.warn(\"startAutoRun\", \"No pending tasks to run\");\n            return;\n        }\n        _utils_run_all_logger__WEBPACK_IMPORTED_MODULE_9__.runAllLogger.info(\"startAutoRun\", \"Found \".concat(pendingTasks.length, \" pending tasks\"), {\n            taskIds: pendingTasks.map((t)=>t.id)\n        });\n        // Reset task queue and populate with pending tasks (just _id)\n        clearTaskQueue();\n        pendingTasks.forEach((task)=>addToTaskQueue(task.id));\n        // Set initial queue size for execution mode determination\n        setInitialQueueSize(pendingTasks.length);\n        // Mark as batch run for auto-run functionality\n        setIsBatchRun(true);\n        // Check if any tasks have variables\n        const allVariables = (0,_utils_variable_utils__WEBPACK_IMPORTED_MODULE_8__.getAllVariablesFromTasks)(pendingTasks);\n        if (allVariables.length > 0) {\n            _utils_run_all_logger__WEBPACK_IMPORTED_MODULE_9__.runAllLogger.info(\"startAutoRun\", \"Variables found, showing modal\", {\n                variables: allVariables\n            });\n            // Show modal for variable input\n            setShowVariableModal(true);\n        } else {\n            _utils_run_all_logger__WEBPACK_IMPORTED_MODULE_9__.runAllLogger.info(\"startAutoRun\", \"No variables, starting execution directly\");\n            setAutoRunning(true);\n            // Start with the first task, the queue will handle the rest\n            const firstTask = pendingTasks[0];\n            if (firstTask) {\n                _utils_run_all_logger__WEBPACK_IMPORTED_MODULE_9__.runAllLogger.logTaskExecution(\"startAutoRun\", \"starting first task\", firstTask.id);\n                await executeTaskWithVariables(firstTask);\n            } else {\n                _utils_run_all_logger__WEBPACK_IMPORTED_MODULE_9__.runAllLogger.error(\"startAutoRun\", \"No first task found\");\n                setAutoRunning(false);\n            }\n        }\n    };\n    // Stop auto-running\n    const stopAutoRun = ()=>{\n        _utils_run_all_logger__WEBPACK_IMPORTED_MODULE_9__.runAllLogger.warn(\"stopAutoRun\", \"Manually stopping auto-run\");\n        _utils_run_all_logger__WEBPACK_IMPORTED_MODULE_9__.runAllLogger.logQueueState(\"stopAutoRun\", {\n            taskQueue,\n            autoRunning,\n            isLoading,\n            currentTask,\n            isAnyTaskRunning,\n            isBatchRun\n        });\n        setAutoRunning(false);\n        setIsAnyTaskRunning(false);\n        setIsBatchRun(false);\n        setIsAgentStarting(false);\n        // Also clear current task if it's not actually running\n        if (currentTask && !isLoading) {\n            _utils_run_all_logger__WEBPACK_IMPORTED_MODULE_9__.runAllLogger.info(\"stopAutoRun\", \"Clearing stuck current task\", {\n                currentTaskId: currentTask.id\n            });\n            setCurrentTask(null);\n        }\n        // Clear task queue\n        clearTaskQueue();\n        _utils_run_all_logger__WEBPACK_IMPORTED_MODULE_9__.runAllLogger.info(\"stopAutoRun\", \"Auto-run stopped successfully\");\n    };\n    // Stop current task\n    const stopCurrentTask = async ()=>{\n        if (currentTask) {\n            try {\n                await fetch(\"\".concat(API_BASE_URL, \"/tasks/\").concat(currentTask.id, \"/stop\"), {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    }\n                });\n                // Update local task status\n                setTasks((prevTasks)=>prevTasks.map((t)=>t.id === currentTask.id ? {\n                            ...t,\n                            status: \"pending\"\n                        } : t));\n            } catch (error) {\n                console.error(\"Failed to stop task:\", error);\n            }\n        }\n        setCurrentTask(null);\n        setIsLoading(false);\n        setAutoRunning(false);\n        streamingMessageRef.current = \"\";\n    };\n    // Save steps to MongoDB\n    const saveSteps = async (taskId, steps, label)=>{\n        try {\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/tasks/\").concat(taskId), {\n                method: \"PUT\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    instructions: steps,\n                    label: label\n                })\n            });\n            if (response.ok) {\n                // Update local tasks with array format\n                setTasks((prevTasks)=>prevTasks.map((t)=>t.id === taskId ? {\n                            ...t,\n                            instructions: steps,\n                            label: label\n                        } : t));\n            } else {\n                throw new Error(\"Failed to save steps\");\n            }\n        } catch (error) {\n            console.error(\"Error saving steps:\", error);\n            throw error;\n        }\n    };\n    // Create new task\n    const createTask = async (instructions, label)=>{\n        try {\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/tasks\"), {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    instructions: instructions,\n                    label: label\n                })\n            });\n            if (response.ok) {\n                // Refresh tasks to show the new task\n                await fetchTasks();\n            } else {\n                throw new Error(\"Failed to create task\");\n            }\n        } catch (error) {\n            console.error(\"Error creating task:\", error);\n            throw error;\n        }\n    };\n    // Delete task\n    const deleteTask = async (taskId)=>{\n        try {\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/tasks/\").concat(taskId), {\n                method: \"DELETE\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                }\n            });\n            if (response.ok) {\n                // Refresh tasks to show updated list\n                await fetchTasks();\n            } else {\n                throw new Error(\"Failed to delete task\");\n            }\n        } catch (error) {\n            console.error(\"Error deleting task:\", error);\n            throw error;\n        }\n    };\n    // Handle delete with confirmation\n    const handleDeleteTask = (task)=>{\n        const taskLabel = task.label || \"Task \".concat(task.id.substring(0, 8));\n        const confirmed = window.confirm('Are you sure you want to delete \"'.concat(taskLabel, '\"?\\n\\nThis action cannot be undone.'));\n        if (confirmed) {\n            deleteTask(task.id);\n        }\n    };\n    // Load tasks on component mount\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        fetchTasks();\n    }, []);\n    // Removed safety mechanism - deterministic code doesn't need backup systems\n    // Status configuration for flexible status handling\n    const statusConfig = {\n        pending: {\n            color: \"bg-yellow-500\",\n            textColor: \"text-gray-300\",\n            label: \"PENDING\"\n        },\n        running: {\n            color: \"bg-yellow-500\",\n            textColor: \"text-yellow-300\",\n            label: \"RUNNING\",\n            animated: true\n        },\n        passed: {\n            color: \"bg-green-500\",\n            textColor: \"text-green-300\",\n            label: \"PASSED\"\n        },\n        completed: {\n            color: \"bg-green-500\",\n            textColor: \"text-green-300\",\n            label: \"PASSED\"\n        },\n        failed: {\n            color: \"bg-red-500\",\n            textColor: \"text-red-300\",\n            label: \"FAILED\"\n        },\n        error: {\n            color: \"bg-red-500\",\n            textColor: \"text-red-300\",\n            label: \"ERRORED\"\n        }\n    };\n    const getStatusConfig = (task)=>{\n        var _task_execution_report;\n        let status = task.status;\n        // Handle validation-based status override\n        if ((status === \"passed\" || status === \"completed\") && ((_task_execution_report = task.execution_report) === null || _task_execution_report === void 0 ? void 0 : _task_execution_report.js_validation)) {\n            status = task.execution_report.js_validation.success ? \"passed\" : \"failed\";\n        }\n        return statusConfig[status] || {\n            color: \"bg-gray-500\",\n            textColor: \"text-gray-300\",\n            label: \"UNKNOWN\"\n        };\n    };\n    const formatDate = (dateStr)=>{\n        if (!dateStr) return \"Never\";\n        return new Date(dateStr).toLocaleString();\n    };\n    const getInstructionsText = (instructions)=>{\n        if (!instructions || !Array.isArray(instructions)) {\n            return \"No instructions\";\n        }\n        // FIX: Join with better spacing for display\n        return instructions.join(\" → \");\n    };\n    const getModalStyles = ()=>{\n        switch(panelMode){\n            case \"maximized\":\n                return \"fixed top-[100px] inset-x-0 bottom-0 z-[60] w-full\";\n            case \"default\":\n                return \"fixed inset-4 z-[60] w-auto h-auto max-w-4xl max-h-[80vh] left-1/2 top-1/2 transform -translate-x-1/2 -translate-y-1/2\";\n            case \"minimized\":\n                return \"hidden\"; // Completely hide when minimized\n            default:\n                return \"fixed inset-0 z-[60] w-full h-full\";\n        }\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"\".concat(getModalStyles(), \" bg-zinc-900 border border-zinc-600 rounded-lg overflow-hidden shadow-2xl\"),\n        style: {\n            backgroundColor: \"#18181b\"\n        },\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"flex items-center justify-between px-4 py-3 border-b border-zinc-600 bg-zinc-800\",\n                style: {\n                    backgroundColor: \"#27272a\"\n                },\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h2\", {\n                        className: \"text-white text-lg font-medium\",\n                        children: \"Task Runner\"\n                    }, void 0, false, {\n                        fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                        lineNumber: 1511,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"flex items-center gap-2\",\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                            onClick: ()=>setPanelMode(\"minimized\"),\n                            className: \"text-white hover:text-gray-300 p-1 transition-colors\",\n                            title: \"Minimize\",\n                            children: getMinimizeIcon()\n                        }, void 0, false, {\n                            fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                            lineNumber: 1514,\n                            columnNumber: 11\n                        }, this)\n                    }, void 0, false, {\n                        fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                        lineNumber: 1512,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                lineNumber: 1510,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"flex flex-col max-h-[calc(100vh-150px)]\",\n                children: [\n                    panelMode !== \"minimized\" && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"p-4 border-b border-zinc-600\",\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"flex items-center gap-3 flex-wrap\",\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                    onClick: startAutoRun,\n                                    disabled: taskQueue.length > 0 || isLoading || isAnyTaskRunning || tasks.some((t)=>t.status === \"running\"),\n                                    className: \"px-3 py-2 text-sm bg-green-600 hover:bg-green-700 disabled:bg-zinc-600 disabled:cursor-not-allowed text-white rounded\",\n                                    children: taskQueue.length > 0 || isAnyTaskRunning || tasks.some((t)=>t.status === \"running\") ? \"Running...\" : \"Run all\"\n                                }, void 0, false, {\n                                    fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                                    lineNumber: 1530,\n                                    columnNumber: 15\n                                }, this),\n                                (taskQueue.length > 0 || isAnyTaskRunning || tasks.some((t)=>t.status === \"running\")) && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                    onClick: stopAutoRun,\n                                    className: \"px-3 py-2 text-sm bg-red-600 hover:bg-red-700 text-white rounded\",\n                                    children: \"Stop\"\n                                }, void 0, false, {\n                                    fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                                    lineNumber: 1538,\n                                    columnNumber: 17\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                    onClick: ()=>_utils_run_all_logger__WEBPACK_IMPORTED_MODULE_9__.runAllLogger.exportLogs(),\n                                    className: \"px-3 py-2 text-sm bg-yellow-600 hover:bg-yellow-700 text-white rounded\",\n                                    title: \"Export debug logs\",\n                                    children: \"Export Logs\"\n                                }, void 0, false, {\n                                    fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                                    lineNumber: 1545,\n                                    columnNumber: 15\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                    onClick: ()=>{\n                                        setStepEditorTask(null); // null means creating new task\n                                        setShowTaskCreator(true);\n                                    },\n                                    disabled: isLoading || isAnyTaskRunning,\n                                    className: \"px-3 py-2 text-sm bg-blue-600 hover:bg-blue-700 disabled:bg-zinc-600 disabled:cursor-not-allowed text-white rounded\",\n                                    children: \"Add Task\"\n                                }, void 0, false, {\n                                    fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                                    lineNumber: 1552,\n                                    columnNumber: 15\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"text-sm text-gray-400 ml-4 flex-1 min-w-0\",\n                                    children: !API_BASE_URL ? \"API not configured\" : currentTask ? \"Running: \".concat(getInstructionsText(currentTask.instructions).substring(0, 50), \"...\") : isAgentStarting ? \"Agent starting...\" : autoRunning ? \"Waiting for next task...\" : \"Idle\"\n                                }, void 0, false, {\n                                    fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                                    lineNumber: 1562,\n                                    columnNumber: 15\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                            lineNumber: 1529,\n                            columnNumber: 13\n                        }, this)\n                    }, void 0, false, {\n                        fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                        lineNumber: 1528,\n                        columnNumber: 11\n                    }, this),\n                    panelMode !== \"minimized\" && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"flex-1 overflow-y-auto m-6\",\n                        children: tasks.length === 0 ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"flex items-center justify-center h-full text-center text-gray-500\",\n                            children: !API_BASE_URL ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"text-red-500\",\n                                        children: \"API not configured\"\n                                    }, void 0, false, {\n                                        fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                                        lineNumber: 1580,\n                                        columnNumber: 21\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"text-sm mt-2\",\n                                        children: [\n                                            \"API_BASE_URL: \",\n                                            API_BASE_URL || \"undefined\"\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                                        lineNumber: 1581,\n                                        columnNumber: 21\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                                lineNumber: 1579,\n                                columnNumber: 19\n                            }, this) : \"No tasks found. Add tasks to MongoDB to get started.\"\n                        }, void 0, false, {\n                            fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                            lineNumber: 1577,\n                            columnNumber: 15\n                        }, this) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"table\", {\n                            className: \"w-full\",\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"thead\", {\n                                    className: \"border-b border-gray-600\",\n                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"tr\", {\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"th\", {\n                                                className: \"text-left px-4 py-3 text-sm font-medium text-gray-300\",\n                                                children: \"Status\"\n                                            }, void 0, false, {\n                                                fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                                                lineNumber: 1591,\n                                                columnNumber: 21\n                                            }, this),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"th\", {\n                                                className: \"text-left px-4 py-3 text-sm font-medium text-gray-300\",\n                                                children: \"Name\"\n                                            }, void 0, false, {\n                                                fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                                                lineNumber: 1592,\n                                                columnNumber: 21\n                                            }, this),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"th\", {\n                                                className: \"text-left px-4 py-3 text-sm font-medium text-gray-300\",\n                                                children: \"Instructions\"\n                                            }, void 0, false, {\n                                                fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                                                lineNumber: 1593,\n                                                columnNumber: 21\n                                            }, this),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"th\", {\n                                                className: \"text-left px-4 py-3 text-sm font-medium text-gray-300\",\n                                                children: \"Last Run\"\n                                            }, void 0, false, {\n                                                fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                                                lineNumber: 1594,\n                                                columnNumber: 21\n                                            }, this),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"th\", {\n                                                className: \"text-center px-4 py-3 text-sm font-medium text-gray-300\",\n                                                children: \"Report\"\n                                            }, void 0, false, {\n                                                fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                                                lineNumber: 1595,\n                                                columnNumber: 21\n                                            }, this),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"th\", {\n                                                className: \"text-left px-4 py-3 text-sm font-medium text-gray-300\",\n                                                children: \"Actions\"\n                                            }, void 0, false, {\n                                                fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                                                lineNumber: 1596,\n                                                columnNumber: 21\n                                            }, this)\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                                        lineNumber: 1590,\n                                        columnNumber: 19\n                                    }, this)\n                                }, void 0, false, {\n                                    fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                                    lineNumber: 1589,\n                                    columnNumber: 17\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"tbody\", {\n                                    children: tasks.map((task)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"tr\", {\n                                            className: \"group border-b border-zinc-700 hover:bg-blue-900/30 transition-colors \".concat((currentTask === null || currentTask === void 0 ? void 0 : currentTask.id) === task.id ? \"bg-zinc-700/50 ring-1 ring-zinc-500\" : \"\", \" \").concat(task.status === \"running\" ? \"animate-pulse\" : \"\"),\n                                            children: [\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"td\", {\n                                                    className: \"px-4 py-3\",\n                                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                        className: \"flex items-center gap-2\",\n                                                        children: (()=>{\n                                                            const config = getStatusConfig(task);\n                                                            return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                                                                children: [\n                                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                        className: \"w-3 h-3 rounded-full \".concat(config.color, \" \").concat(config.animated ? \"animate-pulse\" : \"\")\n                                                                    }, void 0, false, {\n                                                                        fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                                                                        lineNumber: 1615,\n                                                                        columnNumber: 33\n                                                                    }, this),\n                                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                                                        className: \"text-sm font-medium \".concat(config.textColor),\n                                                                        children: config.label\n                                                                    }, void 0, false, {\n                                                                        fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                                                                        lineNumber: 1616,\n                                                                        columnNumber: 33\n                                                                    }, this),\n                                                                    task.status === \"running\" && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"svg\", {\n                                                                        className: \"w-4 h-4 text-yellow-400 animate-spin\",\n                                                                        fill: \"none\",\n                                                                        viewBox: \"0 0 24 24\",\n                                                                        children: [\n                                                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"circle\", {\n                                                                                className: \"opacity-25\",\n                                                                                cx: \"12\",\n                                                                                cy: \"12\",\n                                                                                r: \"10\",\n                                                                                stroke: \"currentColor\",\n                                                                                strokeWidth: \"4\"\n                                                                            }, void 0, false, {\n                                                                                fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                                                                                lineNumber: 1619,\n                                                                                columnNumber: 37\n                                                                            }, this),\n                                                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                                                                                className: \"opacity-75\",\n                                                                                fill: \"currentColor\",\n                                                                                d: \"m4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 714 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n                                                                            }, void 0, false, {\n                                                                                fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                                                                                lineNumber: 1620,\n                                                                                columnNumber: 37\n                                                                            }, this)\n                                                                        ]\n                                                                    }, void 0, true, {\n                                                                        fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                                                                        lineNumber: 1618,\n                                                                        columnNumber: 35\n                                                                    }, this)\n                                                                ]\n                                                            }, void 0, true);\n                                                        })()\n                                                    }, void 0, false, {\n                                                        fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                                                        lineNumber: 1610,\n                                                        columnNumber: 25\n                                                    }, this)\n                                                }, void 0, false, {\n                                                    fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                                                    lineNumber: 1609,\n                                                    columnNumber: 23\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"td\", {\n                                                    className: \"px-4 py-3\",\n                                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                        className: \"text-sm text-white\",\n                                                        children: task.label ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                                            className: \"text-blue-300 font-medium\",\n                                                            children: task.label\n                                                        }, void 0, false, {\n                                                            fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                                                            lineNumber: 1631,\n                                                            columnNumber: 29\n                                                        }, this) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                                            className: \"text-gray-500 italic\",\n                                                            children: \"No name\"\n                                                        }, void 0, false, {\n                                                            fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                                                            lineNumber: 1633,\n                                                            columnNumber: 29\n                                                        }, this)\n                                                    }, void 0, false, {\n                                                        fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                                                        lineNumber: 1629,\n                                                        columnNumber: 25\n                                                    }, this)\n                                                }, void 0, false, {\n                                                    fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                                                    lineNumber: 1628,\n                                                    columnNumber: 23\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"td\", {\n                                                    className: \"px-4 py-3\",\n                                                    children: [\n                                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                            onClick: ()=>{\n                                                                if (task && task.id) {\n                                                                    setStepEditorTask(task);\n                                                                }\n                                                            },\n                                                            className: \"text-sm text-white max-w-md cursor-pointer hover:bg-blue-900/30 p-2 rounded transition-colors\",\n                                                            title: \"Click to edit steps\",\n                                                            children: (()=>{\n                                                                const instructionsText = getInstructionsText(task.instructions);\n                                                                return instructionsText.length > 100 ? \"\".concat(instructionsText.substring(0, 100), \"...\") : instructionsText;\n                                                            })()\n                                                        }, void 0, false, {\n                                                            fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                                                            lineNumber: 1638,\n                                                            columnNumber: 25\n                                                        }, this),\n                                                        task.error && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                            className: \"text-xs text-red-400 mt-1 truncate\",\n                                                            children: [\n                                                                \"Error: \",\n                                                                task.error\n                                                            ]\n                                                        }, void 0, true, {\n                                                            fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                                                            lineNumber: 1655,\n                                                            columnNumber: 27\n                                                        }, this)\n                                                    ]\n                                                }, void 0, true, {\n                                                    fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                                                    lineNumber: 1637,\n                                                    columnNumber: 23\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"td\", {\n                                                    className: \"px-4 py-3 text-sm text-gray-400\",\n                                                    children: formatDate(task.last_run || task.started_at)\n                                                }, void 0, false, {\n                                                    fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                                                    lineNumber: 1660,\n                                                    columnNumber: 23\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"td\", {\n                                                    className: \"px-4 py-3 text-center\",\n                                                    children: task.execution_report || task.result || task.error || task.last_run ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                                        onClick: ()=>setSelectedTaskReport(task),\n                                                        className: \"p-2 text-gray-400 hover:text-white hover:bg-blue-900/30 rounded transition-colors\",\n                                                        title: \"View execution report\",\n                                                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"svg\", {\n                                                            className: \"w-5 h-5\",\n                                                            fill: \"none\",\n                                                            stroke: \"currentColor\",\n                                                            viewBox: \"0 0 24 24\",\n                                                            children: [\n                                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                                                                    strokeLinecap: \"round\",\n                                                                    strokeLinejoin: \"round\",\n                                                                    strokeWidth: 2,\n                                                                    d: \"M15 12a3 3 0 11-6 0 3 3 0 016 0z\"\n                                                                }, void 0, false, {\n                                                                    fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                                                                    lineNumber: 1671,\n                                                                    columnNumber: 31\n                                                                }, this),\n                                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                                                                    strokeLinecap: \"round\",\n                                                                    strokeLinejoin: \"round\",\n                                                                    strokeWidth: 2,\n                                                                    d: \"M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z\"\n                                                                }, void 0, false, {\n                                                                    fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                                                                    lineNumber: 1672,\n                                                                    columnNumber: 31\n                                                                }, this)\n                                                            ]\n                                                        }, void 0, true, {\n                                                            fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                                                            lineNumber: 1670,\n                                                            columnNumber: 29\n                                                        }, this)\n                                                    }, void 0, false, {\n                                                        fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                                                        lineNumber: 1665,\n                                                        columnNumber: 27\n                                                    }, this) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                                        className: \"text-gray-600\",\n                                                        children: \"-\"\n                                                    }, void 0, false, {\n                                                        fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                                                        lineNumber: 1676,\n                                                        columnNumber: 27\n                                                    }, this)\n                                                }, void 0, false, {\n                                                    fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                                                    lineNumber: 1663,\n                                                    columnNumber: 23\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"td\", {\n                                                    className: \"px-4 py-3\",\n                                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                        className: \"flex items-center gap-2\",\n                                                        children: [\n                                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                                                onClick: ()=>executeTask(task),\n                                                                disabled: isLoading || task.status === \"running\" || isAnyTaskRunning,\n                                                                className: \"px-3 py-1 text-sm bg-zinc-700 hover:bg-blue-600 disabled:bg-zinc-800 disabled:cursor-not-allowed text-white rounded transition-colors\",\n                                                                children: task.status === \"running\" ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                                                    className: \"flex items-center gap-2\",\n                                                                    children: [\n                                                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"svg\", {\n                                                                            className: \"w-3 h-3 animate-spin\",\n                                                                            fill: \"none\",\n                                                                            viewBox: \"0 0 24 24\",\n                                                                            children: [\n                                                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"circle\", {\n                                                                                    className: \"opacity-25\",\n                                                                                    cx: \"12\",\n                                                                                    cy: \"12\",\n                                                                                    r: \"10\",\n                                                                                    stroke: \"currentColor\",\n                                                                                    strokeWidth: \"4\"\n                                                                                }, void 0, false, {\n                                                                                    fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                                                                                    lineNumber: 1689,\n                                                                                    columnNumber: 35\n                                                                                }, this),\n                                                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                                                                                    className: \"opacity-75\",\n                                                                                    fill: \"currentColor\",\n                                                                                    d: \"m4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n                                                                                }, void 0, false, {\n                                                                                    fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                                                                                    lineNumber: 1690,\n                                                                                    columnNumber: 35\n                                                                                }, this)\n                                                                            ]\n                                                                        }, void 0, true, {\n                                                                            fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                                                                            lineNumber: 1688,\n                                                                            columnNumber: 33\n                                                                        }, this),\n                                                                        \"Running\"\n                                                                    ]\n                                                                }, void 0, true, {\n                                                                    fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                                                                    lineNumber: 1687,\n                                                                    columnNumber: 31\n                                                                }, this) : \"Run\"\n                                                            }, void 0, false, {\n                                                                fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                                                                lineNumber: 1681,\n                                                                columnNumber: 27\n                                                            }, this),\n                                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                                                onClick: ()=>handleDeleteTask(task),\n                                                                disabled: task.status === \"running\",\n                                                                className: \"opacity-0 group-hover:opacity-100 p-1 text-gray-400 hover:text-red-400 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200\",\n                                                                title: \"Delete task\",\n                                                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"svg\", {\n                                                                    className: \"w-4 h-4\",\n                                                                    fill: \"currentColor\",\n                                                                    viewBox: \"0 0 20 20\",\n                                                                    children: [\n                                                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                                                                            fillRule: \"evenodd\",\n                                                                            d: \"M9 2a1 1 0 000 2h2a1 1 0 100-2H9z\",\n                                                                            clipRule: \"evenodd\"\n                                                                        }, void 0, false, {\n                                                                            fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                                                                            lineNumber: 1705,\n                                                                            columnNumber: 31\n                                                                        }, this),\n                                                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                                                                            fillRule: \"evenodd\",\n                                                                            d: \"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\",\n                                                                            clipRule: \"evenodd\"\n                                                                        }, void 0, false, {\n                                                                            fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                                                                            lineNumber: 1706,\n                                                                            columnNumber: 31\n                                                                        }, this)\n                                                                    ]\n                                                                }, void 0, true, {\n                                                                    fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                                                                    lineNumber: 1704,\n                                                                    columnNumber: 29\n                                                                }, this)\n                                                            }, void 0, false, {\n                                                                fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                                                                lineNumber: 1698,\n                                                                columnNumber: 27\n                                                            }, this),\n                                                            task.status === \"completed\" && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"svg\", {\n                                                                className: \"w-4 h-4 text-green-400\",\n                                                                fill: \"currentColor\",\n                                                                viewBox: \"0 0 20 20\",\n                                                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                                                                    fillRule: \"evenodd\",\n                                                                    d: \"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\",\n                                                                    clipRule: \"evenodd\"\n                                                                }, void 0, false, {\n                                                                    fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                                                                    lineNumber: 1712,\n                                                                    columnNumber: 31\n                                                                }, this)\n                                                            }, void 0, false, {\n                                                                fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                                                                lineNumber: 1711,\n                                                                columnNumber: 29\n                                                            }, this),\n                                                            task.status === \"error\" && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"svg\", {\n                                                                className: \"w-4 h-4 text-red-400\",\n                                                                fill: \"currentColor\",\n                                                                viewBox: \"0 0 20 20\",\n                                                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                                                                    fillRule: \"evenodd\",\n                                                                    d: \"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\",\n                                                                    clipRule: \"evenodd\"\n                                                                }, void 0, false, {\n                                                                    fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                                                                    lineNumber: 1717,\n                                                                    columnNumber: 31\n                                                                }, this)\n                                                            }, void 0, false, {\n                                                                fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                                                                lineNumber: 1716,\n                                                                columnNumber: 29\n                                                            }, this)\n                                                        ]\n                                                    }, void 0, true, {\n                                                        fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                                                        lineNumber: 1680,\n                                                        columnNumber: 25\n                                                    }, this)\n                                                }, void 0, false, {\n                                                    fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                                                    lineNumber: 1679,\n                                                    columnNumber: 23\n                                                }, this)\n                                            ]\n                                        }, task.id, true, {\n                                            fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                                            lineNumber: 1601,\n                                            columnNumber: 21\n                                        }, this))\n                                }, void 0, false, {\n                                    fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                                    lineNumber: 1599,\n                                    columnNumber: 17\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                            lineNumber: 1588,\n                            columnNumber: 15\n                        }, this)\n                    }, void 0, false, {\n                        fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                        lineNumber: 1575,\n                        columnNumber: 11\n                    }, this),\n                    panelMode === \"minimized\" && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"flex-1 flex items-center px-4 py-3 text-sm text-gray-300\",\n                        children: currentTask ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"flex items-center gap-3\",\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"w-3 h-3 rounded-full bg-blue-500 animate-pulse\"\n                                }, void 0, false, {\n                                    fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                                    lineNumber: 1735,\n                                    columnNumber: 17\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                    children: [\n                                        \"Running: \",\n                                        getInstructionsText(currentTask.instructions).substring(0, 80),\n                                        \"...\"\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                                    lineNumber: 1736,\n                                    columnNumber: 17\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                            lineNumber: 1734,\n                            columnNumber: 15\n                        }, this) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"flex items-center gap-3\",\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"w-3 h-3 rounded-full bg-gray-500\"\n                                }, void 0, false, {\n                                    fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                                    lineNumber: 1740,\n                                    columnNumber: 17\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                    children: [\n                                        tasks.filter((t)=>t.status === \"pending\").length,\n                                        \" pending tasks\"\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                                    lineNumber: 1741,\n                                    columnNumber: 17\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                            lineNumber: 1739,\n                            columnNumber: 15\n                        }, this)\n                    }, void 0, false, {\n                        fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                        lineNumber: 1732,\n                        columnNumber: 11\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                lineNumber: 1525,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_step_editor__WEBPACK_IMPORTED_MODULE_6__.StepEditor, {\n                task: stepEditorTask,\n                isOpen: !!stepEditorTask || showTaskCreator,\n                onClose: ()=>{\n                    try {\n                        setStepEditorTask(null);\n                        setShowTaskCreator(false);\n                    } catch (error) {\n                        console.error(\"Error closing step editor:\", error);\n                    }\n                },\n                onSave: saveSteps,\n                onCreate: createTask\n            }, void 0, false, {\n                fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                lineNumber: 1751,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_variable_input_modal__WEBPACK_IMPORTED_MODULE_7__.VariableInputModal, {\n                isOpen: showVariableModal,\n                onClose: closeVariableModal,\n                onStart: isBatchRun ? handleAllTasksVariables : handleSingleTaskVariables,\n                variables: isBatchRun ? (0,_utils_variable_utils__WEBPACK_IMPORTED_MODULE_8__.getAllVariablesFromTasks)(tasks) : (0,_utils_variable_utils__WEBPACK_IMPORTED_MODULE_8__.extractVariables)(currentTaskForVariables === null || currentTaskForVariables === void 0 ? void 0 : currentTaskForVariables.instructions),\n                taskTitle: (currentTaskForVariables === null || currentTaskForVariables === void 0 ? void 0 : currentTaskForVariables.id) || \"All Tasks\",\n                isRunningAll: isBatchRun\n            }, void 0, false, {\n                fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                lineNumber: 1767,\n                columnNumber: 7\n            }, this),\n            selectedTaskReport && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_modals_task_execution_report__WEBPACK_IMPORTED_MODULE_10__.TaskExecutionReportModal, {\n                task: selectedTaskReport,\n                isOpen: !!selectedTaskReport,\n                onClose: ()=>setSelectedTaskReport(null)\n            }, void 0, false, {\n                fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n                lineNumber: 1782,\n                columnNumber: 9\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/home/computeragent/nextjs/src/app/bottom-panel/task-runner-panel/index.tsx\",\n        lineNumber: 1508,\n        columnNumber: 5\n    }, this);\n}\n_s(TaskRunnerPanel, \"DRLsnJRdQo/P9R3SKplO44XMCEc=\", false, function() {\n    return [\n        _context__WEBPACK_IMPORTED_MODULE_2__.useApp,\n        _task_context__WEBPACK_IMPORTED_MODULE_3__.useTask,\n        _task_runner_context__WEBPACK_IMPORTED_MODULE_4__.useTaskRunner\n    ];\n});\n_c = TaskRunnerPanel;\nvar _c;\n$RefreshReg$(_c, \"TaskRunnerPanel\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/bottom-panel/task-runner-panel/index.tsx\n"));

/***/ })

});